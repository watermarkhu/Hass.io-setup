- id: set_google_home_slider_position
  alias: Set Google Home Slider Position
  trigger:
  - platform: state
    entity_id: media_player.google_home
  condition:
  - condition: template
    value_template: '{{ not is_state_attr("media_player.google_home", "volume_level",
      states("input_number.home_volume") | int / 100) }}'
  action:
  - service: input_number.set_value
    entity_id: input_number.home_volume
    data:
      value: '{{ trigger.to_state.attributes.volume_level | multiply(100) | int }}'
- id: set_google_home_volume
  alias: Set Google Home Volume
  trigger:
  - platform: state
    entity_id: input_number.home_volume
  condition:
  - condition: template
    value_template: '{{ not is_state_attr("media_player.google_home", "volume_level",
      states("input_number.home_volume") | int / 100) }}'
  action:
  - service: media_player.volume_set
    entity_id: media_player.google_home
    data:
      volume_level: '{{ states("input_number.home_volume") | int / 100 }}'
- id: '1598304909639'
  alias: Restart HA core
  description: Restart HA core every 2~3 days
  trigger:
  - at: 04:00:00
    platform: time
  condition:
  - condition: time
    weekday:
    - sun
    - tue
    - thu
  action:
  - data: {}
    service: homeassistant.restart
  mode: single
- id: '1610459546154'
  alias: Light scene selector
  description: Auto update light scene from input select
  trigger:
  - platform: state
    entity_id: input_select.light_scene
  condition: []
  action:
  - service: script.turn_on
    data:
      entity_id: script.{{ trigger.to_state.state }}_light
  mode: single
- id: '1620909826978'
  alias: Dark/Light theme
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id: sun.sun
  condition: []
  action:
  - service: frontend.set_theme
    data_template:
      name: "{% if is_state('sun.sun', 'above_horizon') %}\n  Google Light Theme\n\
        {% else %}\n  Github Dark Theme\n{% endif %}\n"
  mode: single
- id: '1621242296533'
  alias: Transfer spotify playback
  description: Transfers the spotify playback according to the selected value in input_select.spotify_player
  trigger:
  - platform: state
    entity_id: input_select.spotify_player
  condition:
  - condition: state
    entity_id: media_player.spotify_mark_shui_hu
    state: playing
  action:
  - service: spotcast.start
    data:
      entity_id: "{% if is_state(\"input_select.spotify_player\", \"Bedroom speaker\"\
        ) %}\n  media_player.google_home\n{% endif %}\n"
      spotify_device_id: "{% if is_state(\"input_select.spotify_player\", \"HomeAssistant\"\
        ) %}\n  4444925cf7cff74f53e771e283a2b8f94403a16f\n{% endif %}\n"
  mode: single
